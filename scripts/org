#!/usr/bin/env bash
# scripts/org
# Grammar (strict):
#   org
#   org --ui console
#   org --ui tmux
#
# Positional 'tmux'/'console' is NOT supported.
# Writes /work/.org/{tmux.conf, tmux-inner.sh} at runtime. No heredocs.

set -Eeuo pipefail

usage() {
  cat >&2 <<'USAGE'
Usage:
  org
  org --ui console
  org --ui tmux

Env:
  ORG_BUN_BIN         (default: /usr/local/bin/bun)
  ORG_TMUX_BIN        (default: /usr/bin/tmux)
  ORG_TMUX_STAY_OPEN  (never|onerror|always; default: never)
  SANDBOX_BACKEND     (default: none)        # disable nested sandboxing
  ORG_SANDBOX_BACKEND (default: none)
  ORG_EXTERNAL_TMUX_BOOTSTRAP is forced to 1 in tmux mode
USAGE
}

# -------- parse args (only --ui allowed) ----------
mode="console"   # default
rest=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --ui)
      shift
      [[ "${1-}" != "" ]] || { echo "ERROR: --ui requires value (tmux|console)"; usage; exit 2; }
      mode="$1"; shift
      ;;
    --ui=*)
      mode="${1#--ui=}"; shift
      ;;
    tmux|console)
      echo "ERROR: positional '$1' is not supported. Use: org --ui $1" >&2
      usage; exit 2
      ;;
    -h|--help|help)
      usage; exit 0
      ;;
    *)
      rest+=("$1"); shift
      ;;
  esac
done

if [[ "${mode}" != "tmux" && "${mode}" != "console" ]]; then
  echo "ERROR: unknown --ui value '${mode}' (must be tmux|console)" >&2
  usage; exit 2
fi

# -------- paths & bins ----------
ORG_DIR="/work/.org"
LOG_DIR="${ORG_DIR}/logs"
TMUX_CONF="${ORG_DIR}/tmux.conf"
INNER_SH="${ORG_DIR}/tmux-inner.sh"

BUN_BIN="${ORG_BUN_BIN:-/usr/local/bin/bun}"
TMUX_BIN="${ORG_TMUX_BIN:-/usr/bin/tmux}"
APP_ENTRY="/work/src/app.ts"
STAY_OPEN="${ORG_TMUX_STAY_OPEN:-never}"   # never|onerror|always

# Disable nested sandboxing by default (prevents "podman not found")
export SANDBOX_BACKEND="${SANDBOX_BACKEND:-none}"
export ORG_SANDBOX_BACKEND="${ORG_SANDBOX_BACKEND:-none}"

ensure_dirs() {
  mkdir -p "${LOG_DIR}"
  chmod 700 "${ORG_DIR}" || true
}

write_tmux_conf() {
  {
    printf '# org-tmux-conf v2 (container-local runtime)\n'
    printf 'set -g mouse on\n'
    printf 'set -g history-limit 100000\n'
    printf 'set -g default-terminal "screen-256color"\n'
    printf 'set -g escape-time 0\n'
    printf 'set -g detach-on-destroy on\n'
    printf 'set -g exit-empty on\n'        # tmux exits when last window ends
    printf 'setw -g remain-on-exit off\n'  # no "dead" pane
  } >"${TMUX_CONF}"
  chmod 600 "${TMUX_CONF}"
}

write_inner_sh() {
  {
    printf '#!/usr/bin/env bash\n'
    printf 'set -Eeuo pipefail\n'
    printf 'LOG_DIR="/work/.org/logs"\n'
    printf 'LOG_FILE="${LOG_DIR}/tmux-inner.log"\n'
    printf 'APP_ENTRY="/work/src/app.ts"\n'
    printf 'BUN_BIN="${ORG_BUN_BIN:-/usr/local/bin/bun}"\n'
    printf 'STAY_OPEN="${ORG_TMUX_STAY_OPEN:-never}"\n'
    # Hard-stop the internal heredoc writer in the Node app:
    printf 'export ORG_EXTERNAL_TMUX_BOOTSTRAP=1\n'
    # Also ensure nested sandboxing is off in the child process:
    printf 'export SANDBOX_BACKEND="${SANDBOX_BACKEND:-none}"\n'
    printf 'export ORG_SANDBOX_BACKEND="${ORG_SANDBOX_BACKEND:-none}"\n'
    printf 'mkdir -p "${LOG_DIR}"\n'
    printf 'if [[ ! -f "${APP_ENTRY}" ]]; then echo "ERROR: entrypoint not found: ${APP_ENTRY}" | tee -a "${LOG_FILE}" >&2; exit 42; fi\n'
    printf '{ echo "===== org tmux-inner start: $(date -Is) ====="; echo "cmd: ${BUN_BIN} $_
