#!/usr/bin/env bash
# scripts/org
# Grammar (strict):
#   org
#   org --ui console
#   org --ui tmux
#
# Writes /work/.org/{tmux.conf, tmux-inner.sh} at runtime (no heredocs).

set -Eeuo pipefail

usage() {
  cat >&2 <<'USAGE'
Usage:
  org
  org --ui console
  org --ui tmux

Env:
  ORG_BUN_BIN         (default: /usr/local/bin/bun)
  ORG_TMUX_BIN        (default: /usr/bin/tmux)
  ORG_TMUX_STAY_OPEN  (never|onerror|always; default: never)
USAGE
}

# ---- parse args (only --ui allowed) ----
mode="console"   # default
rest=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --ui) shift; [[ "${1-}" != "" ]] || { echo "ERROR: --ui requires tmux|console"; usage; exit 2; }; mode="$1"; shift ;;
    --ui=*) mode="${1#--ui=}"; shift ;;
    tmux|console) echo "ERROR: positional '$1' is not supported. Use: org --ui $1"; usage; exit 2 ;;
    -h|--help|help) usage; exit 0 ;;
    *) rest+=("$1"); shift ;;
  esac
done
[[ "${mode}" == "tmux" || "${mode}" == "console" ]] || { echo "ERROR: --ui ${mode} (must be tmux|console)"; exit 2; }

# ---- paths & bins ----
ORG_DIR="/work/.org"
LOG_DIR="${ORG_DIR}/logs"
TMUX_CONF="${ORG_DIR}/tmux.conf"
INNER_SH="${ORG_DIR}/tmux-inner.sh"

BUN_BIN="${ORG_BUN_BIN:-/usr/local/bin/bun}"
TMUX_BIN="${ORG_TMUX_BIN:-/usr/bin/tmux}"
APP_ENTRY="/work/src/app.ts"
STAY_OPEN="${ORG_TMUX_STAY_OPEN:-never}"   # never|onerror|always

ensure_dirs() { mkdir -p "${LOG_DIR}"; chmod 700 "${ORG_DIR}" || true; }

write_tmux_conf() {
  {
    printf '# org-tmux-conf v2 (container-local runtime)\n'
    printf 'set -g mouse on\n'
    printf 'set -g history-limit 100000\n'
    printf 'set -g default-terminal "screen-256color"\n'
    printf 'set -g escape-time 0\n'
    printf 'set -g detach-on-destroy on\n'
    printf 'set -g exit-empty on\n'        # tmux exits when last window ends
    printf 'setw -g remain-on-exit off\n'  # no dead pane
  } > "${TMUX_CONF}"
  chmod 600 "${TMUX_CONF}"
}

write_inner_sh() {
  {
    printf '#!/usr/bin/env bash\n'
    printf 'set -Eeuo pipefail\n'
    printf 'LOG_DIR="/work/.org/logs"\n'
    printf 'LOG_FILE="${LOG_DIR}/tmux-inner.log"\n'
    printf 'APP_ENTRY="/work/src/app.ts"\n'
    printf 'BUN_BIN="${ORG_BUN_BIN:-/usr/local/bin/bun}"\n'
    printf 'STAY_OPEN="${ORG_TMUX_STAY_OPEN:-never}"\n'
    # Disable the app's internal tmux heredoc writer:
    printf 'export ORG_EXTERNAL_TMUX_BOOTSTRAP=1\n'
    printf 'mkdir -p "${LOG_DIR}"\n'
    printf '[[ -f "${APP_ENTRY}" ]] || { echo "ERROR: entrypoint not found: ${APP_ENTRY}" | tee -a "${LOG_FILE}" >&2; exit 42; }\n'
    printf '{ echo "===== org tmux-inner start: $(date -Is) ====="; echo "cmd: ${BUN_BIN} ${APP_ENTRY} --ui console"; } | tee -a "${LOG_FILE}"\n'
    printf 'set +e\n'
    printf '"${BUN_BIN}" "${APP_ENTRY}" --ui console 2>&1 | tee -a "${LOG_FILE}"\n'
    printf 'APP_CODE=${PIPESTATUS[0]}\n'
    printf 'set -e\n'
    printf 'case "${STAY_OPEN}" in\n'
    printf '  always)  echo "App exited (${APP_CODE}). Keeping pane (always)."  | tee -a "${LOG_FILE}"; exec tail -f /dev/null ;;\n'
    printf '  onerror) if [[ ${APP_CODE} -ne 0 ]]; then echo "App failed (${APP_CODE}). Keeping pane (onerror)." | tee -a "${LOG_FILE}"; exec tail -f /dev/null; fi ;;\n'
    printf 'esac\n'
    printf 'exit "${APP_CODE}"\n'
  } > "${INNER_SH}"
  chmod 700 "${INNER_SH}"
}

run_tmux() {
  [[ -x "${TMUX_BIN}" ]] || { echo "ERROR: tmux not found at ${TMUX_BIN}" >&2; exit 1; }
  [[ -x "${BUN_BIN}"  ]] || { echo "ERROR: bun not found at ${BUN_BIN}"  >&2; exit 1; }
  ensure_dirs; write_tmux_conf; write_inner_sh
  exec "${TMUX_BIN}" -vv -f "${TMUX_CONF}" -L org new-session -A -s org "/work/.org/tmux-inner.sh"
}

run_console() {
  [[ -x "${BUN_BIN}"  ]] || { echo "ERROR: bun not found at ${BUN_BIN}"  >&2; exit 1; }
  ensure_dirs; LOG_FILE="${LOG_DIR}/console.log"
  [[ -f "${APP_ENTRY}" ]] || { echo "ERROR: entrypoint not found: ${APP_ENTRY}" >&2; exit 42; }
  export ORG_EXTERNAL_TMUX_BOOTSTRAP=1
  { echo "===== org console start: $(date -Is) ====="; echo "cmd: ${BUN_BIN} ${APP_ENTRY} --ui console"; } | tee -a "${LOG_FILE}"
  exec "${BUN_BIN}" "${APP_ENTRY}" --ui console "${rest[@]}" 2>&1 | tee -a "${LOG_FILE}"
}

case "${mode}" in
  tmux) run_tmux ;;
  console) run_console ;;
esac
