#!/usr/bin/env bash
# org-launcher-tmux
# Single-command tmux launcher for org that preserves a real TTY and logs pane output.
# Usage: org --ui tmux [app-args...]
#
# Behavior:
# - Creates/attaches a tmux session.
# - Runs the app inside a PTY (via `script`) so stdout/stderr are interactive & visible.
# - Pipes the pane to a rotating log file without breaking TTY.
# - Keeps the pane on screen after exit (remain-on-exit) for postmortem.

set -Eeuo pipefail

# -------- Config (override via environment if needed) -------------------------
# Preferred working directory inside the container; falls back to $PWD on host.
ORG_WORKDIR_DEFAULT="/work"
ORG_WORKDIR="${ORG_WORKDIR:-${ORG_WORKDIR_DEFAULT}}"
if [[ ! -d "$ORG_WORKDIR" ]]; then
  ORG_WORKDIR="$PWD"
fi

# State and logs live under .org/
ORG_STATE_DIR="${ORG_STATE_DIR:-$ORG_WORKDIR/.org}"
ORG_LOG_DIR="$ORG_STATE_DIR/logs"
ORG_TMUX_LOG_DIR="$ORG_LOG_DIR/tmux-logs"

# tmux identifiers
ORG_TMUX_SOCKET="${ORG_TMUX_SOCKET:-org}"
ORG_TMUX_SESSION="${ORG_TMUX_SESSION:-org}"
ORG_TMUX_WINDOW="${ORG_TMUX_WINDOW:-0}"
ORG_TMUX_PANE="${ORG_TMUX_PANE:-0}"

# App entry (console UI to render inside tmux)
# All args passed to this launcher are forwarded to the app.
ORG_ENTRY_BASE="${ORG_ENTRY_BASE:-bun $ORG_WORKDIR/src/app.ts --ui console}"
ORG_ENTRY="$ORG_ENTRY_BASE ${*:-}"

# Log files
PANE_LOG="$ORG_LOG_DIR/pane-0.log"
INNER_LOG="$ORG_LOG_DIR/tmux-inner.log"

# Tools
SHELL_BIN="${SHELL:-/bin/bash}"
SCRIPT_BIN="$(command -v script || true)"


# ---------------- tmux behavior toggles (defaults chosen for dev) -------------
# Show final pane after the process exits (good for postmortem). off = vanish.
ORG_TMUX_REMAIN_ON_EXIT="${ORG_TMUX_REMAIN_ON_EXIT:-on}"     # on|off (session option)

# Kill the session automatically when the *pane* (your app) exits/dies.
# This is often what you want in CI or “single-app” UX.
ORG_TMUX_EXIT_ON_PANE_CLOSE="${ORG_TMUX_EXIT_ON_PANE_CLOSE:-off}"  # on|off

# Make the tmux server exit when it has no sessions left.
ORG_TMUX_EXIT_EMPTY="${ORG_TMUX_EXIT_EMPTY:-on}"             # on|off (global)

# Detach clients instead of killing them when session/window/pane is destroyed.
ORG_TMUX_DETACH_ON_DESTROY="${ORG_TMUX_DETACH_ON_DESTROY:-on}"  # on|off (global)

# Hide the tmux status bar to give the app more space.
ORG_TMUX_STATUS="${ORG_TMUX_STATUS:-on}"                     # on|off (session)


# -------- Prep dirs -----------------------------------------------------------
mkdir -p "$ORG_STATE_DIR" "$ORG_LOG_DIR" "$ORG_TMUX_LOG_DIR"

# -------- Generate a tiny inner runner (avoids quoting foot-guns) ------------
INNER_RUNNER="$ORG_STATE_DIR/tmux-inner.sh"
cat >"$INNER_RUNNER" <<'EOF'
#!/usr/bin/env bash
set -Eeuo pipefail

LOG_DIR="${ORG_LOG_DIR:?}"
APP_LOG="${INNER_LOG:?}"
ENTRY="${ORG_ENTRY:?}"
SHELL_BIN="${SHELL_BIN:-/bin/bash}"
SCRIPT_BIN="${SCRIPT_BIN:-}"

{
  echo "===== org tmux-inner start: $(date -Is) ====="
  echo "[inner] cwd=$(pwd) uid=$(id -u):$(id -g) PATH=$PATH"
  echo "[inner] entry: \$ENTRY"
} >>"$APP_LOG" 2>&1

# If util-linux `script` is available, use it to preserve a real PTY while logging.
if [[ -n "$SCRIPT_BIN" ]]; then
  exec "$SCRIPT_BIN" -qfe -c "$ENTRY" "$APP_LOG"
fi

# Fallback keeps logs but may reduce interactivity (no PTY).
exec "$SHELL_BIN" -lc "$ENTRY 2>&1 | tee -a \"$APP_LOG\"; exit \${PIPESTATUS[0]}"
EOF
chmod +x "$INNER_RUNNER"

# Export runtime variables for the inner runner
export ORG_LOG_DIR ORG_TMUX_LOG_DIR INNER_LOG="$INNER_LOG" ORG_ENTRY="$ORG_ENTRY" SHELL_BIN SCRIPT_BIN

# -------- tmux bootstrap ------------------------------------------------------
export TMUX_TMPDIR="${TMUX_TMPDIR:-/tmp}"
tmux -L "$ORG_TMUX_SOCKET" start-server

# Create session if it doesn't exist yet
if ! tmux -L "$ORG_TMUX_SOCKET" has-session -t "$ORG_TMUX_SESSION" 2>/dev/null; then
  # Start the session detached running our inner runner
  tmux -L "$ORG_TMUX_SOCKET" new-session -d -s "$ORG_TMUX_SESSION" -n main "exec \"$INNER_RUNNER\""

  apply_tmux_bool_opt session remain-on-exit "$ORG_TMUX_REMAIN_ON_EXIT" -t "$ORG_TMUX_SESSION"
  apply_tmux_bool_opt session status "$ORG_TMUX_STATUS" -t "$ORG_TMUX_SESSION"

  # Keep pane visible after exit for debugging
  tmux -L "$ORG_TMUX_SOCKET" set-option -t "$ORG_TMUX_SESSION" remain-on-exit on

  # Mirror pane output to a timestamped log (does not break TTY)
  # `-o` only starts piping if not already active (idempotent).
  tmux -L "$ORG_TMUX_SOCKET" pipe-pane -t "$ORG_TMUX_SESSION:$ORG_TMUX_WINDOW.$ORG_TMUX_PANE" -o "ts %H:%M:%.S >> \"$PANE_LOG\""

  # Exit when the *pane* closes (optional)
  if [[ "$ORG_TMUX_EXIT_ON_PANE_CLOSE" == "on" ]]; then
    # Kill the whole session when the main pane exits/dies.
    # We scope hooks to this session only.
    tmuxS set-hook -t "$ORG_TMUX_SESSION" pane-exit
fi

# If a pipe-pane got disabled somehow, ensure it's on (idempotent).
tmux -L "$ORG_TMUX_SOCKET" pipe-pane -t "$ORG_TMUX_SESSION:$ORG_TMUX_WINDOW.$ORG_TMUX_PANE" -o "ts %H:%M:%.S >> \"$PANE_LOG\"" || true

# -------- Attach --------------------------------------------------------------
exec tmux -L "$ORG_TMUX_SOCKET" attach -t "$ORG_TMUX_SESSION"
