#!/usr/bin/env bash
# orgctl - MIT License
# v0.7.4
# - Apple Silicon: Lima backend (Lima 1.2.x compatible; no --detach)
# - Intel: minimal VBox shim

set -euo pipefail
VERSION="0.7.4"

ORG_DIR="$(cd "$(dirname "$0")" && pwd)"
SSH_USER="$(whoami)"

# ---------- utils ----------
need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1" >&2; exit 1; }; }
backend(){ local m s; m="$(uname -m)"; s="$(uname -s)"; [[ "$m" == "arm64" && "$s" == "Darwin" ]] && echo lima || { [[ "$m" == "x86_64" ]] && echo vbox || { echo "Unsupported: $m/$s" >&2; exit 1; }; }; }

lima_cfg() {
  local p
  for p in "${ORG_LIMA_CONFIG:-}" "$PWD/.org/config/org.lima.yaml" "$HOME/.config/org/org.lima.yaml" "$ORG_DIR/.org/config/org.lima.yaml"; do
    [[ -n "${p:-}" && -f "$p" ]] && { echo "$p"; return; }
  done
  cat >&2 <<'EOF'
orgctl: could not find org.lima.yaml

Searched:
  $ORG_LIMA_CONFIG
  $PWD/.org/config/org.lima.yaml
  $HOME/.config/org/org.lima.yaml
  $ORG_DIR/.org/config/org.lima.yaml

Fix:
  export ORG_LIMA_CONFIG="$PWD/.org/config/org.lima.yaml"
  # or
  mkdir -p ~/.config/org && ln -s "$PWD/.org/config/org.lima.yaml" ~/.config/org/org.lima.yaml
EOF
  exit 1
}

# ---------- Lima helpers ----------
lima_exists() { [[ -d "$HOME/.lima/org.lima" ]] || limactl list 2>/dev/null | awk 'NR>1{print $1}' | grep -qx org.lima 2>/dev/null; }

lima_wait_ready(){
  local i=0 spin='|/-\'
  printf "Waiting for VM to become ready "
  while (( i < 180 )); do
    limactl shell org.lima -- true >/dev/null 2>&1 && { printf "\r%-70s\r" ""; return 0; }
    printf "\rWaiting for VM to become ready %c" "${spin:i%4:1}"
    sleep 2; ((i++))
  done
  printf "\nTimed out. See: tail -f ~/.lima/org.lima/serial*.log\n" >&2
  return 1
}

brew_prefix(){ command -v brew >/dev/null 2>&1 && brew --prefix || echo /opt/homebrew; }
brew_has_vmnet(){ command -v brew >/dev/null 2>&1 && brew list --formula 2>/dev/null | grep -qx socket_vmnet; }
vmnet_running(){ pgrep -f '/socket_vmnet(/socket_vmnet)?' >/dev/null 2>&1 || pgrep -f 'socket_vmnet' >/dev/null 2>&1; }

ensure_vmnet_binary() {
  [[ "$(uname -s)" == "Darwin" ]] || return 0
  local hb="$(brew_prefix)/opt/socket_vmnet/bin/socket_vmnet"
  local sys="/opt/socket_vmnet/bin/socket_vmnet"
  if [[ -L "$sys" ]]; then
    echo "Replacing symlink $sys with real binary copy (Lima 1.2.x requirement)"
    sudo rm "$sys"
    sudo cp "$hb" "$sys"
    sudo chmod 755 "$sys"
  elif [[ ! -x "$sys" ]]; then
    echo "Installing socket_vmnet with Homebrew…"
    brew install socket_vmnet
    sudo mkdir -p /opt/socket_vmnet/bin
    sudo cp "$hb" "$sys"
    sudo chmod 755 "$sys"
  fi
}

start_vmnet(){
  ensure_vmnet_binary || true
  brew_has_vmnet || brew install socket_vmnet
  echo "Starting socket_vmnet (requires sudo)…"
  sudo brew services restart socket_vmnet
}

ensure_vmnet_if_needed(){
  [[ "$(uname -s)" == "Darwin" ]] || return 0
  local cfg="$1"
  grep -qE '^[[:space:]]*networks:' "$cfg" || return 0
  vmnet_running && return 0
  if [[ -t 0 && -t 1 ]]; then
    echo
    echo "Networking helper 'socket_vmnet' is not running."
    read -r -p "Fix/install/start it now via Homebrew (sudo)? [Y/n] " ans; ans=${ans:-Y}
    [[ $ans =~ ^[Yy]$ ]] && start_vmnet || echo "Continuing without it (provisioning may stall)…"
  else
    echo "orgctl: socket_vmnet not running; provisioning may stall." >&2
  fi
}

lima_start() {
  local cfg="$1"
  if lima_exists; then
    echo "Starting existing Lima instance…"
    nohup limactl start org.lima >/tmp/orgctl-lima-start.log 2>&1 < /dev/null &
  else
    echo "Creating Lima instance from $cfg …"
    nohup limactl start --name org.lima "$cfg" >/tmp/orgctl-lima-create.log 2>&1 < /dev/null &
  fi
  lima_wait_ready
}

tail_vm_log() {
  local log
  log="$(ls -1t ~/.lima/org.lima/serial*.log 2>/dev/null | head -n1 || true)"
  [[ -n "$log" ]] || return 0
  echo "Tailing VM console log ($log)…"
  tail -f "$log" &
  TAIL_PID=$!
  trap "kill $TAIL_PID 2>/dev/null || true" EXIT INT TERM
}

lima_attach() {
  echo "Attaching to VM…"
  if limactl shell -h 2>&1 | grep -q -- '--workdir'; then
    limactl shell --workdir "/home/$SSH_USER.linux/dev" org.lima || limactl shell org.lima
  else
    limactl shell org.lima -- bash -lc 'cd "$HOME/dev" 2>/dev/null || cd ~; exec bash -l'
  fi
}

# ---------- VBox stub ----------
vbox_init(){ echo "TODO: VBox unattended install"; }

# ---------- commands ----------
cmd_quickstart() {
  if [[ "$(backend)" != "lima" ]]; then
    echo "quickstart is for Apple Silicon (Lima)." >&2
    exit 1
  fi
  need limactl
  local cfg; cfg="$(lima_cfg)"
  ensure_vmnet_if_needed "$cfg"
  echo "Using Lima config: $cfg"
  lima_start "$cfg"
  tail_vm_log
  lima_attach
}

cmd_vm(){
  local sub="${1:-}"; shift || true
  case "$(backend)" in
    lima)
      case "$sub" in
        init|up)  need limactl; ensure_vmnet_if_needed "$(lima_cfg)"; lima_start "$(lima_cfg)";;
        stop)     need limactl; limactl stop org.lima || true;;
        destroy)  need limactl; limactl delete org.lima || true;;
        ssh)      need limactl; lima_attach;;
        export)   echo "Export not supported for Lima";;
        *) echo "Unknown vm subcommand: $sub" >&2; exit 1;;
      esac
      ;;
    vbox)
      case "$sub" in
        init) vbox_init;;
        *) echo "Use VBox directly for now";;
      esac
      ;;
  esac
}

usage(){ cat <<EOF
orgctl v$VERSION
USAGE:
  orgctl quickstart
  orgctl vm <init|up|stop|destroy|ssh>
  orgctl version
EOF
}

case "${1:-}" in
  quickstart) shift; cmd_quickstart "$@";;
  vm)         shift; cmd_vm "$@";;
  version)    echo "$VERSION";;
  ""|help|-h|--help) usage;;
  *) usage; exit 1;;
esac
