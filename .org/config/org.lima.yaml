# org.lima.yaml â€” one-command install, prewarmed image, reliable logs, scratch tmpfs, no git in VM

images:
  - location: "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-arm64.img"
    arch: "aarch64"

cpus: 4
memory: "8GiB"
disk: "40GiB"

mounts:
  - location: "~/dev"
    mountPoint: "/home/{{.User}}.linux/dev"
    writable: true

networks:

provision:
  # ---- SYSTEM PHASE (root) ----
  - mode: system
    script: |
      # POSIX-sh friendly logging
      LOG_FILE="/var/log/org-provision-system.log"
      mkdir -p /var/log
      : > "$LOG_FILE"
      chmod 0644 "$LOG_FILE"
      export PS4='+ [$(date -Is)] '
      exec >>"$LOG_FILE" 2>&1
      set -eux

      echo "=== SYSTEM PROVISION START $(date -Is) ==="

      export DEBIAN_FRONTEND=noninteractive
      apt-get update
      apt-get install -y software-properties-common ca-certificates curl gnupg
      add-apt-repository -y universe
      apt-get update

      # Podman + rootless deps + essentials
      apt-get install -y \
        podman uidmap slirp4netns fuse-overlayfs iptables \
        containernetworking-plugins \
        ufw git jq unzip bash-completion

      # Per-user scratch tmpfs (1GiB, noexec,nosuid,nodev)
      SCRATCH_DIR="/home/{{.User}}.linux/scratch"
      mkdir -p "$SCRATCH_DIR"
      if ! grep -q " $SCRATCH_DIR " /etc/fstab; then
        echo "tmpfs $SCRATCH_DIR tmpfs rw,nosuid,nodev,noexec,relatime,size=1g 0 0" >> /etc/fstab
      fi
      mountpoint -q "$SCRATCH_DIR" || mount "$SCRATCH_DIR"

      # Passwordless sudo for the login user; SSH for limactl shell
      printf '%s ALL=(ALL) NOPASSWD:ALL\n' '{{.User}}' > /etc/sudoers.d/90-{{.User}}-nopasswd
      chmod 0440 /etc/sudoers.d/90-{{.User}}-nopasswd
      systemctl enable --now ssh

      # Create network lockdown script (allow only loopback + macOS LLM port)
      cat >/usr/local/bin/org-network-lockdown <<'LOCKDOWN_SCRIPT'
      #!/bin/bash
      # Lock down egress to: loopback + ${LMS_HOST_IP}:${LMS_HOST_PORT} (from /etc/llm-uds.env)
      set -euo pipefail

      # Load LLM host/port used by the UDS forwarder
      if [ -r /etc/llm-uds.env ]; then
        # shellcheck disable=SC1091
        . /etc/llm-uds.env
      else
        echo "[lockdown] /etc/llm-uds.env missing; refusing to lock down blindly." >&2
        exit 1
      fi

      # Sanity defaults (should already be set by provision)
      : "${LMS_HOST_IP:=192.168.5.2}"
      : "${LMS_HOST_PORT:=11434}"

      # ----- IPv4 egress policy -----
      iptables -F OUTPUT 2>/dev/null || true
      iptables -P OUTPUT ACCEPT

      # Allow loopback
      iptables -A OUTPUT -o lo -j ACCEPT

      # Allow established/related
      iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

      # Allow ONLY TCP to the macOS LLM port
      iptables -A OUTPUT -p tcp -d "${LMS_HOST_IP}" --dport "${LMS_HOST_PORT}" -j ACCEPT

      # Reject everything else
      iptables -A OUTPUT -j REJECT --reject-with icmp-net-unreachable

      # ----- IPv6 egress policy (deny all, allow ::1) -----
      if command -v ip6tables >/dev/null 2>&1; then
        ip6tables -F OUTPUT 2>/dev/null || true
        ip6tables -P OUTPUT ACCEPT
        ip6tables -A OUTPUT -o lo -j ACCEPT
        ip6tables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
        ip6tables -A OUTPUT -j REJECT --reject-with icmp6-adm-prohibited
      fi

      echo "[lockdown] egress allowed only to ${LMS_HOST_IP}:${LMS_HOST_PORT} (TCP) and loopback"
      LOCKDOWN_SCRIPT

      chmod 755 /usr/local/bin/org-network-lockdown


      # Make lockdown persistent across reboots
      cat >/etc/systemd/system/org-network-lockdown.service <<'SERVICE_UNIT'
      [Unit]
      Description=Org Network Lockdown
      After=network.target
      Wants=network.target

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/org-network-lockdown
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
      SERVICE_UNIT

      systemctl enable org-network-lockdown.service

      # Create background polling script for network lockdown
      cat >/usr/local/bin/org-network-watcher <<'WATCHER_SCRIPT'
      #!/bin/bash
      # Background script to wait for provisioning completion and apply lockdown
      set -euo pipefail

      LOG_FILE="/var/log/org-network-watcher.log"
      exec >>"$LOG_FILE" 2>&1

      echo "$(date -Is): Network watcher started, waiting for /tmp/provisioning.done"

      # Wait for user provisioning to complete
      while [ ! -f /tmp/provisioning.done ]; do
        sleep 5
      done

      echo "$(date -Is): User provisioning completed, applying network lockdown..."
      /usr/local/bin/org-network-lockdown

      echo "$(date -Is): Network locked down successfully"
      WATCHER_SCRIPT

      chmod 755 /usr/local/bin/org-network-watcher

      # Start the network watcher in background
      nohup /usr/local/bin/org-network-watcher &

      echo "=== NETWORK OPEN - Background watcher started ==="
      echo "=== SYSTEM PROVISION END $(date -Is) ==="

  # ---- USER PHASE ({{.User}}.linux) ----
  - mode: user
    script: |
      LOG_DIR="$HOME/.org/logs"
      mkdir -p "$LOG_DIR"
      LOG_FILE="$LOG_DIR/org-provision-user.log"
      export PS4='+ [$(date -Is)] '
      exec >>"$LOG_FILE" 2>&1
      set -eux

      # Trap to create done file on any exit (success or failure)
      trap 'touch /tmp/provisioning.done' EXIT

      echo "=== USER PROVISION START $(date -Is) ==="

      # Shell init
      if ! grep -q "\. ~/.bashrc" ~/.bash_profile 2>/dev/null; then
        printf '[ -r ~/.bashrc ] && . ~/.bashrc\n' >> ~/.bash_profile
      fi
      mkdir -p ~/.bashrc.d
      if ! grep -q ".bashrc.d" ~/.bashrc 2>/dev/null; then
        printf '\nfor f in ~/.bashrc.d/*.sh; do [ -r "$f" ] && . "$f"; done\n' >> ~/.bashrc
      fi
      cat >~/.bashrc.d/10-org-prompt.sh <<'EOF'
      export PROMPT_DIRTRIM=2
      PS1='\[\e[1;95m\][VM]\[\e[0m\] \[\e[1;36m\]\u@\h\[\e[0m\]:\[\e[1;32m\]\w\[\e[0m\]\$ '
      EOF

      # Require host bind-mounted repo; no git in VM
      if [ ! -d "$HOME/dev/org/.git" ]; then
        echo "ERROR: Expected host bind mount at $HOME/dev/org (.git missing)."
        echo "HINT (on host):  mkdir -p ~/dev && git clone https://github.com/tjamescouch/org.git ~/dev/org"
        exit 1
      fi

      # Prewarm container image during provisioning (blocks until finished)
      cd "$HOME/dev/org"
      SANDBOX_BACKEND=podman ORG_ENGINE=podman \
      bash ./install.sh

      while [ -f /tmp/provisioning.done ]; do
        echo "Waiting for ack from system."
        sleep 5
      done

      echo "=== USER PROVISION END $(date -Is) ==="

ssh:
  localPort: 0
firmware:
  legacyBIOS: false