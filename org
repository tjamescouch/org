#!/usr/bin/env bash
# org — robust CLI launcher (macOS/Linux, Bash 3.2+)
# Exit codes:
#   66 = entrypoint not found
#   127 = runtime missing (bun/node not found)
# Debug: export ORG_DEBUG=1

set -euo pipefail

DBG="${ORG_DEBUG:-0}"
log() { [ "$DBG" = "1" ] || return 0; printf '[org.sh] %s\n' "$*" >&2; }

# ------------------------------------------------------------------------------
# Config
# ------------------------------------------------------------------------------

# Container engine preference (can override)
ORG_ENGINE="${ORG_CONTAINER_ENGINE:-podman}"
# Dev image to use (can override)
ORG_IMAGE="${ORG_DEV_IMAGE:-localhost/org-build:debian-12}"

# Paths inside container
CTR_WORK="/work"
CTR_APPDIR="$CTR_WORK/.org"
CTR_ENTRY="$CTR_APPDIR/src/app.ts"

# Detect if we are already inside a container (podman/docker)
in_container=0
if [ -f /run/.containerenv ] || [ -n "${container:-}" ]; then
  in_container=1
fi

# ------------------------------------------------------------------------------
# Resolve script/app directory and entry
# ------------------------------------------------------------------------------

SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L="$(readlink "$SCRIPT")"
  case "$L" in
    /*) SCRIPT="$L" ;;
    *)  SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;;
  esac
done
APPDIR="$(cd "$(dirname "$SCRIPT")" && pwd)"
log "script=$SCRIPT"
log "appdir=$APPDIR"

# Find entry on host (used in host mode)
find_entry() {
  local e=""
  for p in \
    "$APPDIR/src/app.ts" \
    "$APPDIR/runner.ts" "$APPDIR/runner.mts" "$APPDIR/runner.js" \
    "$APPDIR/dist/runner.js"
  do
    if [ -f "$p" ]; then e="$p"; break; fi
  done
  printf '%s' "$e"
}

# ------------------------------------------------------------------------------
# Parse -C/--cwd and --ui (strip them from $@)
# ------------------------------------------------------------------------------

CWD=""
UI=""
pass_args=()
while [ $# -gt 0 ]; do
  case "$1" in
    -C|--cwd)
      shift; CWD="${1:-}"; shift || true ;;
    --ui)
      shift; UI="${1:-}"; shift || true ;;
    *)
      pass_args+=("$1"); shift ;;
  esac
done

# cd if requested
if [ -n "$CWD" ]; then
  log "cd -> $CWD"
  cd "$CWD" 2>/dev/null || { echo "org: cwd not found: $CWD" >&2; exit 66; }
fi

# ------------------------------------------------------------------------------
# Small helpers
# ------------------------------------------------------------------------------

have() { command -v "$1" >/dev/null 2>&1; }

# quote a vector for safe embedding into bash -lc
qjoin() {
  local a=("$@") out=() s
  for s in "${a[@]}"; do
    # shellcheck disable=SC1003
    out+=("$(printf "%q" "$s")")
  done
  printf '%s ' "${out[@]}"
}

# ------------------------------------------------------------------------------
# Inside-container execution
# ------------------------------------------------------------------------------

run_inside_container() {
  # We are already inside the image. Run with bun; if UI=tmux, run tmux->bash->bun.
  local ui="${UI:-console}"

  # Entry resolution must be done *inside the container* using CTR_ENTRY, not host paths.
  if [ ! -f "$CTR_ENTRY" ]; then
    echo "org: entrypoint not found at $CTR_ENTRY" >&2
    exit 66
  fi

  # Always force the app’s UI explicitly (so tmux outer uses console inner)
  if [ "$ui" = "tmux" ]; then
    # Outer tmux requested, but if we’re already *in* the container this
    # script must *directly* start tmux here and run bun inside it.
    if ! have tmux; then
      echo "org: tmux not found in container." >&2
      exit 127
    fi
    local cmd=("bun" "$CTR_ENTRY" "--ui" "console")
    cmd+=("${pass_args[@]}")
    log "tmux new-session ..."
    exec tmux new -A -s org bash -lc "$(qjoin "${cmd[@]}")"
  else
    # console (direct bun)
    if have bun; then
      local cmd=("bun" "$CTR_ENTRY" "--ui" "console")
      cmd+=("${pass_args[@]}")
      log "exec: ${cmd[*]}"
      exec "${cmd[@]}"
    fi
    echo "org: bun runtime not found." >&2
    exit 127
  fi
}

# ------------------------------------------------------------------------------
# Host-side container wrapper for tmux
# ------------------------------------------------------------------------------

run_tmux_in_container() {
  # Require container engine
  if ! have "$ORG_ENGINE"; then
    echo "org: container engine not found: $ORG_ENGINE" >&2
    exit 127
  fi

  local mount_src="$PWD"
  local ui_inner="console"   # always console inside, tmux outer
  local inner=()
  inner=("env" "ORG_TMUX=1" "ORG_FORCE_UI=$ui_inner" "ORG_APPDIR=$CTR_APPDIR" "ORG_CALLER_CWD=$CTR_WORK"
         "tmux" "new" "-A" "-s" "org" "bash" "-lc")

  # Command we want bash -lc to run *inside tmux*
  local app=()
  app=("bun" "$CTR_ENTRY" "--ui" "$ui_inner")
  app+=("${pass_args[@]}")

  local inner_cmd
  inner_cmd="$(qjoin "${app[@]}")"
  inner+=("$inner_cmd")

  local run=( "$ORG_ENGINE" run --rm -it --network host
              -v "$mount_src:$CTR_APPDIR:Z"
              -w "$CTR_WORK"
              "$ORG_IMAGE"
              bash -lc )

  # the big one-liner we want bash -lc to evaluate in the container:
  local final
  final="$(qjoin "${inner[@]}")"

  log "engine=$ORG_ENGINE image=$ORG_IMAGE"
  log "mount: $mount_src -> $CTR_APPDIR"
  log "tmux inner: $final"

  exec "${run[@]}" "$final"
}

# ------------------------------------------------------------------------------
# Host-side direct execution (console ui)
# ------------------------------------------------------------------------------

run_console_on_host() {
  local entry
  entry="$(find_entry)"
  if [ -z "$entry" ]; then
    echo "org: entrypoint not found. Tried src/app.ts, runner.ts/mts/js, dist/runner.js under $APPDIR" >&2
    exit 66
  fi
  if have bun; then
    local cmd=("bun" "$entry" "--ui" "console")
    cmd+=("${pass_args[@]}")
    log "exec: ${cmd[*]}"
    exec "${cmd[@]}"
  fi
  echo "org: bun runtime not found." >&2
  exit 127
}

# ------------------------------------------------------------------------------
# Main dispatch
# ------------------------------------------------------------------------------

# default UI if not supplied
if [ -z "${UI:-}" ]; then
  UI="${ORG_FORCE_UI:-console}"
fi

log "ui=$UI"
log "engine=$ORG_ENGINE image=$ORG_IMAGE"

if [ "$in_container" = "1" ]; then
  # We are already inside the container (e.g., image has /usr/local/bin/org)
  run_inside_container
  exit 0
fi

# Host side
case "$UI" in
  tmux)
    run_tmux_in_container
    ;;
  ""|console)
    run_console_on_host
    ;;
  *)
    echo "org: unknown UI: $UI (use 'console' or 'tmux')" >&2
    exit 2
    ;;
esac
