#!/usr/bin/env bash
# CWD-agnostic org launcher: always mounts the repo root to /work
# and runs bun /work/src/app.ts inside the container.

set -Eeuo pipefail

# ---------- resolve real path to this script (portable) ----------
resolve_realpath() {
  # Prefer readlink -f if available; fall back to Python
  if command -v readlink >/dev/null 2>&1; then
    readlink -f "$1" 2>/dev/null || python3 - "$1" <<'PY'
import os, sys; print(os.path.realpath(sys.argv[1]))
PY
  else
    python3 - "$1" <<'PY'
import os, sys; print(os.path.realpath(sys.argv[1]))
PY
  fi
}

SCRIPT_PATH="$(resolve_realpath "$0")"
REPO_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"

# ---------- engine/image/file ----------
ENGINE="${ORG_ENGINE:-podman}"   # set ORG_ENGINE=docker if you prefer
IMAGE="${ORG_IMAGE:-localhost/org-build:debian-12}"
FILE="${ORG_CONTAINERFILE:-$REPO_DIR/Containerfile}"

echo "[org] engine = $ENGINE"
echo "[org] image  = $IMAGE"
echo "[org] file   = $FILE"
echo "[org] repo   = $REPO_DIR"

# ---------- ensure image exists (build if missing) ----------
if ! "$ENGINE" image inspect "$IMAGE" >/dev/null 2>&1; then
  echo "[org] building image with $ENGINE (this can take a while)..."
  "$ENGINE" build -t "$IMAGE" -f "$FILE" "$REPO_DIR"
  echo "[org] image built: $IMAGE"
fi

# ---------- run bun inside the container, mounting the repo root ----------
# - Always mount REPO_DIR â†’ /work, regardless of the caller's CWD.
# - Workdir is /work so /work/src/app.ts is stable.
# - Pass through your args unchanged.
exec "$ENGINE" run --rm -it \
  -v "$REPO_DIR:/work:Z" \
  -w /work \
  -e ORG_PROJECT_DIR=/work \
  -e TERM="${TERM:-xterm-256color}" \
  "$IMAGE" bun /work/src/app.ts "$@"

