#!/usr/bin/env bash
# org â€” thin launcher that delegates to small libs under .org/launcher
# Exit codes: 66 = entrypoint/cwd not found; 127 = runtime missing
set -euo pipefail

# --- Resolve script/appdir (where THIS file lives) ---
SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L="$(readlink "$SCRIPT")"
  case "$L" in
    /*) SCRIPT="$L" ;;
    *)  SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;;
  esac
done
APPDIR="$(cd "$(dirname "$SCRIPT")" && pwd)"

LIBDIR="$APPDIR/.org/launcher"
# shellcheck source=/dev/null
. "$LIBDIR/common.sh"
. "$LIBDIR/console.sh"
. "$LIBDIR/tmux.sh"

# --- Parse flags (sets ORG_UI, ORG_CWD, ORG_FWD_ARGS[]) ---
parse_args "$@"

# Optional working directory switch
if [ -n "${ORG_CWD:-}" ]; then
  log "cd -> $ORG_CWD"
  cd "$ORG_CWD" 2>/dev/null || { err "cwd not found: $ORG_CWD"; exit 66; }
fi

# --- Setup/derive context ---
detect_project_root        # -> ORG_PROJ, ORG_CALLER_CWD
find_entrypoint            # -> ORG_ENTRY (always under $APPDIR)
engine_defaults            # -> ORG_ENGINE, ORG_IMAGE
prepare_logs               # -> ORG_LOG_DIR, ORG_LOG_FILE (+preflight line)

UI="${ORG_UI:-${ORG_FORCE_UI:-console}}"

case "$UI" in
  tmux)       run_tmux_in_container ;;  # in a container, UI=console INSIDE tmux
  ""|console) run_console ;;
  *)          err "unknown --ui value: ${UI}"; exit 2 ;;
esac
