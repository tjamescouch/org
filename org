#!/usr/bin/env bash
# Robust org launcher (macOS/Linux, Bash 3.2+)
# Exit codes: 66 = entrypoint not found; 127 = runtime missing.
set -euo pipefail

# -------------------
# Debug logging
# -------------------
DBG="${ORG_DEBUG:-${DEBUG:-0}}"
log() { [ "$DBG" = "1" ] && printf '[org.sh] %s\n' "$*" >&2 || true; }
err() { printf 'org: %s\n' "$*" >&2; }

# -------------------
# Resolve script path / appdir
# -------------------
SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L="$(readlink "$SCRIPT")"
  case "$L" in
    /*) SCRIPT="$L" ;;
    *)  SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;;
  esac
done
APPDIR="$(cd "$(dirname "$SCRIPT")" && pwd)"   # where the tool is installed
log "script=$SCRIPT"
log "appdir=$APPDIR"

# -------------------
# Parse flags (minimal; pass the rest to the app)
# -------------------
UI=""
CWD=""
args=()
while (($#)); do
  case "$1" in
    -C|--cwd) shift; CWD="${1:-}"; shift || true ;;
    --ui) shift; UI="${1:-}"; shift || true ;;
    --ui=*) UI="${1#*=}"; shift ;;
    *) args+=("$1"); shift ;;
  esac
done
set -- "${args[@]}"

if [ -n "$CWD" ]; then
  log "cd -> $CWD"
  cd "$CWD" 2>/dev/null || { err "cwd not found: $CWD"; exit 66; }
fi

# -------------------
# Detect project root (git toplevel if available)
# -------------------
if git -C "$PWD" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  PROJ="$(git -C "$PWD" rev-parse --show-toplevel)"
else
  PROJ="$PWD"
fi
export ORG_CALLER_CWD="$PROJ"
log "project=$ORG_CALLER_CWD"

# -------------------
# Find entrypoint (ANCHOR TO APPDIR, not project)
# -------------------
ENTRY="${ORG_ENTRY:-}"
if [ -z "$ENTRY" ]; then
  for p in \
    "$APPDIR/src/app.ts" \
    "$APPDIR/runner.ts" \
    "$APPDIR/runner.mts" \
    "$APPDIR/runner.js" \
    "$APPDIR/dist/runner.js"
  do
    if [ -f "$p" ]; then
      ENTRY="$p"
      break
    fi
  done
fi
if [ -z "$ENTRY" ]; then
  err "entrypoint not found near $APPDIR"
  exit 66
fi
if [ "$DBG" = "1" ]; then
  ls -l "$ENTRY" >&2 || true
  head -n 1 "$ENTRY" >&2 || true
fi
log "entry=$ENTRY"

# -------------------
# Container settings (override via env if needed)
# -------------------
ORG_ENGINE="${ORG_ENGINE:-podman}"
ORG_IMAGE="${ORG_IMAGE:-localhost/org-build:debian-12}"
log "engine=$ORG_ENGINE image=$ORG_IMAGE"

# -------------------
# Prepare logs (always in <project>/.org/logs)
# -------------------
LOG_DIR="${ORG_LOG_DIR:-"$PROJ/.org/logs"}"
mkdir -p "$LOG_DIR" || true
LOG_FILE="${ORG_LOG_FILE:-"$LOG_DIR/run-$(date -u +%Y-%m-%dT%H-%M-%SZ).log"}"
export ORG_LOG_DIR="$LOG_DIR" ORG_LOG_FILE="$LOG_FILE"
ln -sf "$(basename "$LOG_FILE")" "$LOG_DIR/last.log" 2>/dev/null || true
printf '[org.sh] preflight %s\n' "$(date -u +%FT%TZ)" | tee -a "$LOG_FILE" >/dev/null
log "log_dir=$LOG_DIR"
log "log_file=$LOG_FILE"

# -------------------
# Host console runner (NO bash -lc; pass "$@" directly)
# -------------------
run_console() {
  log "ui=console"
  export ORG_APPDIR="$APPDIR"  # tool dir (not project)
  export ORG_LOG_LEVEL="${ORG_LOG_LEVEL:-${LOG_LEVEL:-info}}"

  if command -v bun >/dev/null 2>&1; then
    log "exec: bun \"$ENTRY\" $*"
    bun "$ENTRY" "$@" 2>&1 | tee -a "$LOG_FILE"
    exit "${PIPESTATUS[0]}"
  fi
  if command -v node >/dev/null 2>&1; then
    if command -v npx >/dev/null 2>&1; then
      log "exec: npx --yes tsx \"$ENTRY\" $*"
      npx --yes tsx "$ENTRY" "$@" 2>&1 | tee -a "$LOG_FILE"
      exit "${PIPESTATUS[0]}"
    fi
    err "Node found but tsx is missing. Install tsx (npm i -g tsx) or install Bun."
    exit 127
  fi
  err "neither Bun nor Node runtime found in PATH."
  exit 127
}

# -------------------
# tmux in container
#   - mount the project at /work
#   - mount the tool at /tool
#   - run bun /tool/src/app.ts --ui console â€¦ inside tmux
#   - write logs to /work/.org/logs/ (visible on host as <project>/.org/logs/)
# -------------------
run_tmux_in_container() {
  log "ui=tmux"

  local CTR_WORK="/work"              # container project root
  local CTR_TOOL="/tool"              # container tool root (code lives here)
  local CTR_ENTRY="$CTR_TOOL/src/app.ts"

  local MNT_PROJ="$PROJ:$CTR_WORK:Z"
  local MNT_TOOL="$APPDIR:$CTR_TOOL:Z"

  mkdir -p "$PROJ/.org/logs" "$PROJ/.org/logs/tmux-logs" || true
  local LOG_FILE_HOST="$PROJ/.org/logs/tmux-$(date -u +%Y-%m-%dT%H-%M-%SZ).log"

  log "mount proj: $MNT_PROJ"
  log "mount tool: $MNT_TOOL"
  log "host tmux log: $LOG_FILE_HOST"

  # Join args safely for passing to inner script
  local ARGS_JOINED=""
  if [ $# -gt 0 ]; then
    for a in "$@"; do ARGS_JOINED+=" $(printf '%q' "$a")"; done
  fi

  local INNER_SCRIPT="$CTR_WORK/.org/.tmux-inner.sh"

  # Create inner script INSIDE the container
  local CREATE_AND_RUN="
set -Eeuo pipefail
umask 0002

echo '[ctr] creating log dirs and inner script...'
mkdir -p \"$CTR_WORK/.org/logs\" \"$CTR_WORK/.org/logs/tmux-logs\"

cat > \"$INNER_SCRIPT\" <<'EOS'
set -Eeuo pipefail
umask 0002

: \"\${ORG_LOG_DIR:?ORG_LOG_DIR not set}\"
: \"\${ORG_LOG_FILE:?ORG_LOG_FILE not set}\"
: \"\${ENTRY:?ENTRY not set}\"

mkdir -p \"\$ORG_LOG_DIR\"
echo \"[tmux] log -> \$ORG_LOG_FILE\"
echo \"[tmux] bun=\$(command -v bun || echo 'MISSING') entry='\$ENTRY' date=\$(date -u +%FT%TZ)\"

set +e
bun \"\$ENTRY\" --ui console \"\$@\" 2>&1 | tee -a \"\$ORG_LOG_FILE\"
ec=\${PIPESTATUS[0]}
set -e

echo \"[tmux] app exited with \$ec\"
exit \"\$ec\"
EOS

chmod +x \"$INNER_SCRIPT\"

export ENTRY=\"$CTR_ENTRY\"
export TMUX_TMPDIR=\"$CTR_WORK/.org/logs/tmux-logs\"

echo '[ctr] starting tmux -vv ...'
tmux -vv new -A -s org bash --noprofile --norc \"$INNER_SCRIPT\" $ARGS_JOINED
"

  log "about to exec container (this replaces the current process)"
  exec "$ORG_ENGINE" run --rm -it --network host \
    -v "$MNT_PROJ" \
    -v "$MNT_TOOL" \
    -w "$CTR_WORK" \
    -e ORG_TMUX=1 \
    -e ORG_FORCE_UI=console \
    -e ORG_APPDIR="$CTR_TOOL" \
    -e ORG_CALLER_CWD="$CTR_WORK" \
    -e ORG_LOG_DIR="$CTR_WORK/.org/logs" \
    -e ORG_LOG_FILE="$CTR_WORK/.org/logs/$(basename "$LOG_FILE_HOST")" \
    -e ORG_LOG_LEVEL="${ORG_LOG_LEVEL:-${LOG_LEVEL:-info}}" \
    "$ORG_IMAGE" bash -lc "$CREATE_AND_RUN"
}

# -------------------
# Dispatch
# -------------------
case "${UI:-${ORG_FORCE_UI:-console}}" in
  tmux)       run_tmux_in_container "$@" ;;
  ""|console) run_console "$@" ;;
  *)          err "unknown --ui value: ${UI}"; exit 2 ;;
esac
