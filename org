#!/usr/bin/env bash
# org â€” minimal, secure launcher (always offline; UDS to host LLM)
set -Eeo pipefail

echo Checking for host side verbs

# Resolve repo dir (location of this script)
REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load optional host policy
if [[ -f "$PWD/.org/policy-host.env" ]]; then
  # shellcheck disable=SC1090
  source "$PWD/.org/policy-host.env"
fi

ENGINE="${ORG_ENGINE:-podman}"
IMAGE="${ORG_IMAGE:-localhost/org-sandbox:latest}"
REVIEW_MODE="${ORG_REVIEW_MODE:-review}"

# Ensure image exists
if ! "$ENGINE" image inspect "$IMAGE" >/dev/null 2>&1; then
  echo "[org] image not built: $IMAGE" >&2
  exit 1123
fi

# Gather env pass-through (safe subset)
ENV_ALLOW_RE='^(ORG_|LOG_LEVEL|SAFE_MODE|SANDBOX_BACKEND|LLM_|OPENAI_|HTTP_PROXY|HTTPS_PROXY|ALL_PROXY|NO_PROXY)$'
env_allow(){ [[ "$1" =~ $ENV_ALLOW_RE ]]; }
ENV_ARR=()
while IFS='=' read -r k v; do
  if env_allow "$k"; then ENV_ARR+=("-e" "$k=${!k}"); fi
done < <(env | cut -d= -f1-1)

# Work dir choice
mode="$(printf '%s' "${REVIEW_MODE:-review}" | tr '[:upper:]' '[:lower:]')"
if [[ "$mode" == "review" ]]; then
  WORK_SCRATCH="$PWD/.org/work"
else
  WORK_SCRATCH="$PWD"
fi
mkdir -p "$WORK_SCRATCH" "$PWD/.org"

# Compose secure run line
"$ENGINE" run --rm -it \
  --network=none \
  --userns=keep-id \
  --cap-drop=ALL \
  --security-opt no-new-privileges \
  --tmpfs /tmp:size=1G,noexec \
  --memory=4G \
  --cpus=2 \
  --pids-limit=100 \
  --add-host=host.containers.internal:127.0.0.1 \
  -e LLM_BASE_URL='http://host.containers.internal:11434/v1' \
  -e OPENAI_BASE_URL='http://host.containers.internal:11434/v1' \
  -e ORG_LLM_SOCKET='/run/llm.sock' \
  -v /run/llm.sock:/run/llm.sock:ro,Z \
  -v "$WORK_SCRATCH:/work:Z" \
  -v "$PWD:/project:Z,ro" \
  -v "$REPO_DIR:/application:Z" \
  -v "$PWD/.org:/work/.org:Z" \
  -w /work \
  "${ENV_ARR[@]}" \
  "$IMAGE" bash -lc '
    set -Eeuo pipefail
    mkdir -p /work/.org
    if [ "${ORG_REVIEW_MODE:-review}" = review ]; then
      rsync -a --delete --delete-delay --force \
        --exclude ".git/**" --exclude ".org/**" /project/ /work/
      rm -rf /work/.git 2>/dev/null || true
      printf "gitdir: /project/.git\n" > /work/.git
      mkdir -p /tmp/org
      git config --global --add safe.directory /project >/dev/null 2>&1 || true
      git config --global --add safe.directory /work    >/dev/null 2>&1 || true
    fi
    exec org "$@"
  ' org "$@"
