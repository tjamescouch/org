#!/usr/bin/env bash
# Robust org launcher (macOS/Linux, Bash 3.2+)
# Exit codes: 66 = entrypoint not found; 127 = runtime missing.
set -euo pipefail

# -------------------
# Debug logging
# -------------------
DBG="${ORG_DEBUG:-${DEBUG:-0}}"
log() { [ "$DBG" = "1" ] && printf '[org.sh] %s\n' "$*" >&2 || true; }
err() { printf 'org: %s\n' "$*" >&2; }

# -------------------
# Resolve script/app path
# -------------------
SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L="$(readlink "$SCRIPT")"
  case "$L" in
    /*) SCRIPT="$L" ;;
    *)  SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;;
  esac
done
APPDIR="$(cd "$(dirname "$SCRIPT")" && pwd)"   # repo/.org (where this script lives)
log "script=$SCRIPT"
log "appdir=$APPDIR"

# -------------------
# Parse a few flags
#   -C/--cwd <dir>  (cd there before run)
#   --ui console|tmux
#   everything else is forwarded to the app
# -------------------
UI="console"
CWD=""
args=()
while [ $# -gt 0 ]; do
  case "$1" in
    -C|--cwd) shift; CWD="${1:-}"; shift || true ;;
    --ui)     shift; UI="${1:-console}"; shift || true ;;
    --ui=*)   UI="${1#*=}"; shift ;;
    *)        args+=("$1"); shift ;;
  esac
done

if [ -n "$CWD" ]; then
  log "cd -> $CWD"
  cd "$CWD" 2>/dev/null || { err "cwd not found: $CWD"; exit 66; }
fi

# -------------------
# Find entrypoint
# -------------------
ENTRY="$APPDIR/src/app.ts"
if [ ! -f "$ENTRY" ]; then
  err "entrypoint not found: $ENTRY"
  exit 66
fi
if [ "$DBG" = "1" ]; then
  ls -l "$ENTRY" >&2 || true
  head -n 1 "$ENTRY" >&2 || true
fi

# -------------------
# Container settings (override via env if needed)
# -------------------
ORG_ENGINE="${ORG_ENGINE:-podman}"
ORG_IMAGE="${ORG_IMAGE:-localhost/org-build:debian-12}"
log "engine=$ORG_ENGINE image=$ORG_IMAGE"

# -------------------
# Host console runner
# -------------------
run_console() {
  log "ui=console"
  # Minimal preflight log envâ€”keeps your app as-is
  mkdir -p "$APPDIR/logs" || true
  export ORG_APPDIR="$APPDIR"
  export ORG_CALLER_CWD="$PWD"
  export ORG_LOG_DIR="${ORG_LOG_DIR:-$APPDIR/logs}"
  export ORG_LOG_FILE="${ORG_LOG_FILE:-$ORG_LOG_DIR/run-$(date -u +%Y-%m-%dT%H-%M-%SZ).log}"
  export ORG_LOG_LEVEL="${ORG_LOG_LEVEL:-${LOG_LEVEL:-info}}"
  printf '[org.sh] preflight %s\n' "$(date -u +%FT%TZ)" >>"$ORG_LOG_FILE" 2>/dev/null || true

  if command -v bun >/dev/null 2>&1; then
    log "exec: bun \"$ENTRY\" ${args[*]}"
    exec bun "$ENTRY" "${args[@]}"
  fi
  if command -v node >/dev/null 2>&1; then
    if command -v npx >/dev/null 2>&1; then
      log "exec: npx --yes tsx \"$ENTRY\" ${args[*]}"
      exec npx --yes tsx "$ENTRY" "${args[@]}"
    fi
    err "Node found but tsx is missing. Install tsx (npm i -g tsx) or install Bun."
    exit 127
  fi
  err "neither Bun nor Node runtime found in PATH."
  exit 127
}

# -------------------
# Container tmux runner
# -------------------
run_tmux_in_container() {
  log "ui=tmux"
  local CTR_APPDIR="/work/.org"
  local CTR_WORK="/work"
  local CTR_ENTRY="$CTR_APPDIR/src/app.ts"
  local SRC="$APPDIR"
  local MNT="$SRC:$CTR_APPDIR:Z"

  # Host-side logs
  mkdir -p "$APPDIR/logs" "$APPDIR/logs/tmux-logs" || true
  local LOG_DIR_HOST="$APPDIR/logs"
  local LOG_FILE_HOST="$LOG_DIR_HOST/tmux-$(date -u +%Y-%m-%dT%H-%M-%SZ).log"

  # Join user args once (host side) for safe injection
  local ARGS_JOINED=""
  if [ ${#args[@]} -gt 0 ]; then
    for a in "${args[@]}"; do
      ARGS_JOINED+=" $(printf '%q' "$a")"
    done
  fi

  # Inner script path inside container
  local INNER_SCRIPT="$CTR_APPDIR/.tmux-inner.sh"

  # This is the script content that will run inside tmux
  # NOTE: we do not expand host variables here; it is written verbatim then executed in container.
  read -r -d '' SCRIPT_CONTENT <<'EOS'
set -Eeuo pipefail
umask 0002

: "${ORG_LOG_DIR:?ORG_LOG_DIR not set}"
: "${ORG_LOG_FILE:?ORG_LOG_FILE not set}"
: "${ENTRY:?ENTRY not set}"

mkdir -p "$ORG_LOG_DIR"
echo "[tmux] log -> $ORG_LOG_FILE"
echo "[tmux] bun=$(command -v bun) entry='$ENTRY' date=$(date -u +%FT%TZ)"

# Run the app, but keep exit code even after piping through tee
set +e
bun "$ENTRY" --ui console "$@" 2>&1 | tee -a "$ORG_LOG_FILE"
ec=${PIPESTATUS[0]}
set -e

echo "[tmux] app exited with $ec"
exit "$ec"
EOS

  # Command that creates the inner script and starts tmux with verbose logs
  # We put tmux logs into $CTR_APPDIR/logs/tmux-logs which is bound to host ./logs/tmux-logs
  local CREATE_AND_RUN="
    set -Eeuo pipefail
    umask 0002
    mkdir -p \"$CTR_APPDIR/logs\" \"$CTR_APPDIR/logs/tmux-logs\"
    export ENTRY=\"$CTR_ENTRY\"
    cat > \"$INNER_SCRIPT\" <<'EOF'
$SCRIPT_CONTENT
EOF
    chmod +x \"$INNER_SCRIPT\"
    export TMUX_TMPDIR=\"$CTR_APPDIR/logs/tmux-logs\"
    # -vv: tmux server/client logs into TMUX_TMPDIR
    tmux -vv new -A -s org bash --noprofile --norc \"$INNER_SCRIPT\" $ARGS_JOINED
  "

  # Final run
  exec "$ORG_ENGINE" run --rm -it --network host \
      -v "$MNT" \
      -w "$CTR_WORK" \
      -e ORG_TMUX=1 \
      -e ORG_FORCE_UI=console \
      -e ORG_APPDIR="$CTR_APPDIR" \
      -e ORG_CALLER_CWD="$CTR_WORK" \
      -e ORG_LOG_DIR="$CTR_APPDIR/logs" \
      -e ORG_LOG_FILE="$CTR_APPDIR/logs/$(basename "$LOG_FILE_HOST")" \
      -e ORG_LOG_LEVEL="${ORG_LOG_LEVEL:-${LOG_LEVEL:-info}}" \
      "$ORG_IMAGE" bash -lc "$CREATE_AND_RUN"
}


# -------------------
# Dispatch
# -------------------
case "$UI" in
  tmux)       run_tmux_in_container ;;
  ""|console) run_console ;;
  *)          err "unknown --ui value: $UI"; exit 2 ;;
esac
