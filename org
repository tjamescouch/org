#!/usr/bin/env bash
# Robust 'org' launcher for macOS/Linux (Bash 3.2+)
# Exit codes: 66 = cwd/entrypoint not found; 127 = runtime missing
set -euo pipefail

DBG="${ORG_DEBUG:-${DEBUG:-0}}"
log() { [ "$DBG" = "1" ] && printf '[org.sh] %s\n' "$*" >&2 || true; }

# --- resolve script/appdir ----------------------------------------------------
SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L=$(readlink "$SCRIPT")
  case "$L" in
    /*) SCRIPT="$L" ;;
    *)  SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;;
  esac
done
APPDIR="${ORG_APPDIR:-$(cd "$(dirname "$SCRIPT")" && pwd)}"
log "script=$SCRIPT"
log "appdir=$APPDIR"

# --- parse args ---------------------------------------------------------------
CWD="${ORG_CALLER_CWD:-}"
ui=""
args=()
while [ $# -gt 0 ]; do
  case "$1" in
    -C|--cwd|--project) shift; CWD="${1:-}"; shift || true ;;
    --ui)               shift; ui="${1:-}"; shift || true ;;
    *)                  args+=("$1"); shift ;;
  esac
done

if [ -n "$CWD" ]; then
  log "cd -> $CWD"
  cd "$CWD" 2>/dev/null || { echo "org: cwd not found: $CWD" >&2; exit 66; }
fi

# --- inside-container detection & path normalization --------------------------
INSIDE_CONTAINER=""
{ [ -f /.dockerenv ] || [ -f /run/.containerenv ]; } && INSIDE_CONTAINER=1
if [ -n "$INSIDE_CONTAINER" ]; then
  # dev mount convention: project at /work, or the baked tree at /work/.org
  if [ -d /work/.org/src ]; then
    APPDIR="/work/.org"
  elif [ -d /work/src ]; then
    APPDIR="/work"
  fi
  log "container detected -> appdir rewired to $APPDIR"
fi

# --- resolve entrypoint (prefer src/app.ts; fallback runner.ts; dist/runner.js)
ENTRY="${ORG_ENTRY:-}"
try_entries=("$APPDIR/src/app.ts" "$APPDIR/runner.ts" "$APPDIR/dist/runner.js")
if [ -z "$ENTRY" ]; then
  for p in "${try_entries[@]}"; do
    [ -f "$p" ] && { ENTRY="$p"; break; }
  done
fi
[ -n "$ENTRY" ] || { echo "org: entrypoint not found next to $APPDIR" >&2; exit 66; }
log "entry=$ENTRY"; [ "$DBG" = "1" ] && { ls -l "$ENTRY" >&2 || true; head -n1 "$ENTRY" >&2 || true; }


# --- UI selection -------------------------------------------------------------
ui="${ui:-${ORG_FORCE_UI:-console}}"

if [ "$ui" = "tmux" ]; then
  # If already *in* tmux, just run the console UI (tmux is the multiplexer)
  if [ -n "${TMUX:-}" ]; then
    log "already in tmux; downgrading to console UI"
    exec "${RUN[@]}" --ui console "${args[@]}"
  fi

  # Build the exact command we want tmux to run *inside* its session.
  # Always force console UI inside tmux; pass normalized cwd/appdir.
  CMD=$(printf '%q ' env \
    ORG_TMUX=1 ORG_FORCE_UI=console ORG_APPDIR="$APPDIR" ORG_CALLER_CWD="$PWD" \
    "${RUN[@]}" --ui console "${args[@]}")
  log "tmux CMD=$CMD"

  TMUX_NAME="${ORG_TMUX_NAME:-org}"
  # Start (or attach) the tmux session *first*, then run our command inside.
  exec tmux new-session -A -s "$TMUX_NAME" "bash -lc $CMD"
fi

# --- runtime selection (bun preferred) ---------------------------------------
if command -v bun >/dev/null 2>&1; then
  RUN=(bun "$ENTRY")
elif command -v node >/dev/null 2>&1; then
  if command -v npx >/dev/null 2>&1; then
    RUN=(npx --yes tsx "$ENTRY")
  else
    echo "org: Node found but tsx missing. Install 'tsx' (npm i -g tsx) or install bun." >&2
    exit 127
  fi
else
  echo "org: neither bun nor node runtime found in PATH." >&2
  exit 127
fi

# --- default: console UI ------------------------------------------------------
exec "${RUN[@]}" --ui console "${args[@]}"
