#!/usr/bin/env bash
# org â€” launcher for the org CLI (MIT)
# - Runs the TypeScript entry with Bun.
# - (Surgical updates)
#   1) Verify project (-C <dir> or $PWD) is a git repo (.git present).
#   2) Only attempt to build a Podman image if SANDBOX_BACKEND=podman.
#   3) Prompt for confirmation before building the image.

set -Eeuo pipefail

# ---------- resolve repo path of this script ----------
_self="${BASH_SOURCE[0]:-$0}"
while [ -L "$_self" ]; do
  t="$(readlink "$_self")"; case "$t" in /*) _self="$t";; *) _self="$(cd "$(dirname "$_self")" && pwd)/$t";; esac
done
LAUNCHER_DIR="$(cd "$(dirname "$_self")" && pwd)"

# ---------- defaults ----------
APP_ENTRY="${ORG_APP_ENTRY:-$LAUNCHER_DIR/src/app.ts}"
BUN_BIN="${ORG_BUN_BIN:-$(command -v bun || true)}"
IMAGE_TAG="${ORG_IMAGE_TAG:-org:debian12}"
CONTAINERFILE="${ORG_CONTAINERFILE:-Containerfile}"
BUILD_CONTEXT="${ORG_BUILD_CONTEXT:-$LAUNCHER_DIR}"
SANDBOX_BACKEND="${SANDBOX_BACKEND:-podman}"

# ---------- utils ----------
say()  { printf "\033[1;36m==>\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m!!\033[0m %s\n" "$*" >&2; }
die()  { printf "\033[1;31mxx\033[0m %s\n" "$*" >&2; exit 1; }

have() { command -v "$1" >/dev/null 2>&1; }
is_tty(){ [[ -t 0 && -t 1 ]]; }

# ---------- parse minimal flags; pass everything else through ----------
PROJECT_DIR=""
PASSTHRU=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -C|--project)
      [[ $# -ge 2 ]] || die "-C/--project requires a directory"
      PROJECT_DIR="$(cd "$2" 2>/dev/null && pwd || true)"
      shift 2
      ;;
    --) shift; while [[ $# -gt 0 ]]; do PASSTHRU+=("$1"); shift; done;;
    *) PASSTHRU+=("$1"); shift;;
  esac
done

# Choose project directory
if [[ -z "$PROJECT_DIR" ]]; then
  PROJECT_DIR="$(pwd)"
fi
export ORG_PROJECT_DIR="$PROJECT_DIR"

# ---------- (1) verify we are inside a git repo (surgical) ----------
if [[ ! -d "$PROJECT_DIR/.git" ]]; then
  die "Project dir is not a git repository (missing $PROJECT_DIR/.git). Use -C <dir> to point at a repo."
fi

# ---------- ensure Bun ----------
if [[ -z "$BUN_BIN" ]]; then
  die "Bun not found; install Bun or set ORG_BUN_BIN to its path."
fi

# ---------- (2) build Podman image only if backend is podman (surgical) ----------
maybe_build_image() {
  # Only under explicit podman backend
  if [[ "$SANDBOX_BACKEND" != "podman" ]]; then
    return 0
  fi
  if ! have podman; then
    warn "SANDBOX_BACKEND=podman but 'podman' is not installed; continuing without image build."
    return 0
  fi

  # Already exists?
  if podman image exists "$IMAGE_TAG" >/dev/null 2>&1; then
    return 0
  fi

  # (3) ask for confirmation before building (surgical)
  if is_tty; then
    echo
    read -r -p "$(printf 'Podman image %s not found. Build it now? [Y/n] ' "$IMAGE_TAG")" ans
    ans="${ans:-Y}"
    if [[ ! "$ans" =~ ^[Yy]$ ]]; then
      warn "Skipping image build on user choice."
      return 0
    fi
  else
    warn "Podman image $IMAGE_TAG missing and not on a TTY to confirm; skipping build."
    return 0
  fi

  # Build using the provided Containerfile/context
  say "Building Podman image (tag=$IMAGE_TAG, file=$CONTAINERFILE)"
  if [[ ! -f "$BUILD_CONTEXT/$CONTAINERFILE" && ! -f "$CONTAINERFILE" ]]; then
    warn "Containerfile not found at '$BUILD_CONTEXT/$CONTAINERFILE' or '$CONTAINERFILE'; skipping build."
    return 0
  fi
  local cf_path="$CONTAINERFILE"
  [[ -f "$BUILD_CONTEXT/$CONTAINERFILE" ]] && cf_path="$BUILD_CONTEXT/$CONTAINERFILE"
  podman build --pull=always -t "$IMAGE_TAG" -f "$cf_path" "$BUILD_CONTEXT"
}

maybe_build_image

# ---------- launch ----------
exec "$BUN_BIN" "$APP_ENTRY" "${PASSTHRU[@]}"
