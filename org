#!/usr/bin/env bash
# org launcher (macOS/Linux, Bash 3.2+)
# Exit codes: 66 = not found; 127 = runtime missing
set -euo pipefail

DBG="${ORG_DEBUG:-${DEBUG:-0}}"
log() { [ "$DBG" = "1" ] && printf '[org.sh] %s\n' "$*" >&2; }

# -----------------------------------------------------------------------------
# Resolve script/appdir
# -----------------------------------------------------------------------------
SCRIPT="${BASH_SOURCE[0]:-$0}"
while [ -L "$SCRIPT" ]; do
  L="$(readlink "$SCRIPT")"
  case "$L" in /*) SCRIPT="$L" ;; *) SCRIPT="$(cd "$(dirname "$SCRIPT")" && cd "$(dirname "$L")" && pwd)/$(basename "$L")" ;; esac
done
APPDIR="$(cd "$(dirname "$SCRIPT")" && pwd)"
log "script=$SCRIPT"
log "appdir=$APPDIR"

# -----------------------------------------------------------------------------
# Parse args (only care about --ui, pass everything else through)
# -----------------------------------------------------------------------------
UI=""
args=()
while (($#)); do
  case "$1" in
    --ui)      UI="${2:-}"; shift 2;;
    --ui=*)    UI="${1#*=}"; shift;;
    -C|--cwd)  # legacy compatibility; change cwd before anything else
               shift; cd "${1:-.}" 2>/dev/null || { echo "org: cwd not found: $1" >&2; exit 66; }
               shift;;
    *)         args+=("$1"); shift;;
  esac
done
set -- "${args[@]}"

# Default UI if not set
UI="${UI:-${ORG_FORCE_UI:-console}}"
log "ui=$UI"

# -----------------------------------------------------------------------------
# Detect project root (repo toplevel), default to current dir
# -----------------------------------------------------------------------------
if git -C "$PWD" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  PROJ="$(git -C "$PWD" rev-parse --show-toplevel)"
else
  PROJ="$PWD"
fi
export ORG_CALLER_CWD="$PROJ"
log "project=$ORG_CALLER_CWD"

# -----------------------------------------------------------------------------
# Prepare logs BEFORE launching anything else
# -----------------------------------------------------------------------------
LOG_DIR="${ORG_LOG_DIR:-"$ORG_CALLER_CWD/.org/logs"}"
mkdir -p "$LOG_DIR"
LOG_FILE="${ORG_LOG_FILE:-"$LOG_DIR/run-$(date -u +%Y-%m-%dT%H-%M-%SZ).log"}"
export ORG_LOG_DIR="$LOG_DIR" ORG_LOG_FILE="$LOG_FILE"
ln -sf "$(basename "$LOG_FILE")" "$LOG_DIR/last.log" 2>/dev/null || true

# Write a preflight line so you always have *something* in the log even if Bun crashes immediately
printf '[org.sh] preflight %s\n' "$(date -u +%FT%TZ)" | tee -a "$LOG_FILE" >/dev/null
log "log_dir=$LOG_DIR"
log "log_file=$LOG_FILE"

# -----------------------------------------------------------------------------
# Find entrypoint (keep your existing search order)
# -----------------------------------------------------------------------------
ENTRY="${ORG_ENTRY:-}"
if [ -z "$ENTRY" ]; then
  for p in \
    "$APPDIR/src/app.ts" \
    "$APPDIR/runner.ts" \
    "$APPDIR/runner.mts" \
    "$APPDIR/runner.js" \
    "$APPDIR/dist/runner.js"
  do
    [ -f "$p" ] && { ENTRY="$p"; break; }
  done
fi
[ -n "$ENTRY" ] || { echo "org: entrypoint not found near $APPDIR" | tee -a "$LOG_FILE" >&2; exit 66; }
log "entry=$ENTRY"

# -----------------------------------------------------------------------------
# Runtimes / image defaults
# -----------------------------------------------------------------------------
ENGINE="${ORG_ENGINE:-podman}"
IMAGE="${ORG_DEV_IMAGE:-localhost/org-build:debian-12}"

# -----------------------------------------------------------------------------
# Console path: run Bun and tee everything into the log (captures early runtime errors)
# -----------------------------------------------------------------------------
run_console() {
  log "exec (console): bun \"$ENTRY\" $*"
  # Use bash -lc so $PATH/etc is normal; tee early to capture Bun startup failures too.
  exec bash -lc 'bun "'"$ENTRY"'" '"$*" 2>&1' | tee -a "'"$LOG_FILE"'"'
}

# -----------------------------------------------------------------------------
# Tmux path: run in a container; inside we still tee to the same file
# -----------------------------------------------------------------------------
run_tmux() {
  log "engine=$ENGINE image=$IMAGE"
  # Mount project root into /work/.org so logs/patches are project-scoped
  # We keep ORG_FORCE_UI=console inside tmux so the app uses the console UI inside the pane.
  # We mkdir/log inside the container too (belt-and-braces).
  TMUX_CMD=$'tmux new -A -s org bash -lc '\
$'\'mkdir -p "$ORG_LOG_DIR"; '\
$'echo "[tmux] starting $(date -u +%FT%TZ)" | tee -a "$ORG_LOG_FILE"; '\
$'bun "$ENTRY" '"$*" 2>&1 $'| tee -a "$ORG_LOG_FILE"\' 

  exec "$ENGINE" run --rm --network host \
    -v "$ORG_CALLER_CWD":/work/.org:Z \
    -e ORG_TMUX=1 \
    -e ORG_FORCE_UI=console \
    -e ORG_APPDIR=/work/.org \
    -e ORG_CALLER_CWD=/work/.org \
    -e ORG_LOG_DIR \
    -e ORG_LOG_FILE \
    -e ORG_LOG_LEVEL \
    "$IMAGE" bash -lc "$TMUX_CMD"
}

# -----------------------------------------------------------------------------
# Dispatch
# -----------------------------------------------------------------------------
case "$UI" in
  tmux)    run_tmux "$@" ;;
  console|*) run_console "$@" ;;
esac
