#!/usr/bin/env bash
# CWD-agnostic org launcher.
# - Agents work in /work (host path configurable via ORG_WORK_DIR).
# - App code mounts at /application.
# - --review <yes|no> and ORG_REVIEW_MODE control live vs review-gated mode.
# - Host-side sandbox policy may be configured via .org/policy-host.env.

set -Eeuo pipefail

# ---------- resolve real path to this script (portable) ----------
resolve_realpath() {
  if command -v readlink >/dev/null 2>&1; then
    readlink -f "$1" 2>/dev/null || python3 - "$1" <<'PY'
import os, sys; print(os.path.realpath(sys.argv[1]))
PY
  else
    python3 - "$1" <<'PY'
import os, sys; print(os.path.realpath(sys.argv[1]))
PY
  fi
}

SCRIPT_PATH="$(resolve_realpath "$0")"
REPO_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"

# ---------- load host policy config if present ----------
CONF_FILE="$REPO_DIR/.org/policy-host.env"
if [[ -f "$CONF_FILE" ]]; then
  # shellcheck disable=SC1090
  source "$CONF_FILE"
fi

ENGINE="${ORG_ENGINE:-podman}"
IMAGE="${ORG_IMAGE:-localhost/org-sandbox:latest}"
FILE="${ORG_CONTAINERFILE:-$REPO_DIR/Containerfile}"
NETWORK="${ORG_NETWORK:-slirp4netns:allow_host_loopback=true}"
CAPS="${ORG_CAPS:-all}"
USERNS="${ORG_USERNS:-keep-id}"

# ---------- ensure image exists (build if missing) ----------
if ! "$ENGINE" image inspect "$IMAGE" >/dev/null 2>&1; then
  echo "[org] image not built: $IMAGE"

  exit 1123
fi

# ---------- parse CLI (NEW: --review <yes|no>) ----------
REVIEW_MODE="${ORG_REVIEW_MODE:-review}"
ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --review)   shift; val="${1:-}"; [[ -z "$val" ]] && { echo "org: --review requires a value (yes|no)" >&2; exit 2; } ;;
    --review=*) val="${1#*=}" ;;
    --) ARGS+=("$@"); break;;
    *)  ARGS+=("$1"); shift; continue;;
  esac
  lc="$(printf '%s' "$val" | tr '[:upper:]' '[:lower:]')"
  case "$lc" in
    yes|y|true|on|review|0)      REVIEW_MODE="review" ;;
    no|n|false|off|live|apply|1) REVIEW_MODE="live" ;;
    *) echo "org: invalid --review value: $val (use yes|no|1|0|live|review)" >&2; exit 2 ;;
  esac
  shift
done

# ---------- choose /work host path ----------
mode="$(printf '%s' "${REVIEW_MODE:-live}" | tr '[:upper:]' '[:lower:]')"
if [[ -n "${ORG_WORK_DIR:-}" ]]; then
  WORK_SCRATCH="$ORG_WORK_DIR"
elif [[ "$mode" == "review" ]]; then
  WORK_SCRATCH="$PWD/.org/work"
else
  WORK_SCRATCH="$PWD"
fi
mkdir -p "$WORK_SCRATCH"

# ---- upfront repo cleanliness check ----
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  if [[ -n "$(git status --porcelain)" ]]; then
    echo "[org] repo is dirty. Please fix before running review mode."
    exit 1
  fi
else
  echo "[org] This directory is not a Git repo."
  exit 1
fi

echo "[org] review      = $REVIEW_MODE"
echo "[org] engine      = $ENGINE"
echo "[org] image       = $IMAGE"
echo "[org] file        = $FILE"
echo "[org] repo        = $REPO_DIR"
echo "[org] work        = $WORK_SCRATCH -> /work (rw)"
echo "[org] project(ro) = $PWD          -> /project (ro)"
echo "[org] app         = $REPO_DIR     -> /application"
# ---------- container env ----------
ENV_ARR=(
  "-e" "ORG_LAUNCHER_SCRIPT_RAN=1"
  "-e" "ORG_PROJECT_DIR=/work"
  "-e" "ORG_APP_ENTRY=/application/src/app.ts"
  "-e" "ORG_REVIEW_MODE=${REVIEW_MODE}"
  "-e" "TERM=${TERM:-xterm-256color}"
  "-e" "ORG_SANDBOX_BACKEND=none"
  "-e" "ORG_HOST_ALIAS=host.containers.internal"
  "-e" "NO_PROXY=localhost,127.0.0.1,::1,host.containers.internal"
  "-e" "ORG_OPENAI_BASE_DEFAULT=${ORG_OPENAI_BASE_DEFAULT:-http://host.containers.internal:11434/v1}"
)

env_allow() {
  local k="$1"
  # preserve a small, safe set from the host environment (if present)
  [[ "$k" =~ ^(NO_PROXY|http_proxy|https_proxy|all_proxy|no_proxy|LANG|LC_.*|TZ|TERM|FORCE_COLOR|NO_COLOR|ORG_.*)$ ]]
}
for k in $(env | cut -d= -f1); do
  if env_allow "$k"; then
    ENV_ARR+=("-e" "$k=${!k}")
  fi
done

mkdir -p "$PWD/.org"

# ---------- run inside the container ----------
set +e
"$ENGINE" run --rm -it \
  --network="$NETWORK" \
  --cap-drop="${CAPS^^}" \
  --userns="$USERNS" \
  -v "$WORK_SCRATCH:/work:Z" \
  -v "$PWD:/project:Z,ro" \
  -v "$REPO_DIR:/application:Z" \
  -v "$PWD/.org:/work/.org:Z" \
  -w /work \
  "${ENV_ARR[@]}" \
  "$IMAGE" bash -lc '
    set -Eeuo pipefail
    mkdir -p /work/.org
    if [ "${ORG_REVIEW_MODE:-live}" = review ]; then
      rsync -a --delete  --delete-delay --force --exclude ".git/**" --exclude ".org/**" /project/ /work/
      rm -rf /work/.git 2>/dev/null || true
      printf "gitdir: /project/.git\n" > /work/.git
      git config --global --add safe.directory /project >/dev/null 2>&1 || true
      git config --global --add safe.directory /work    >/dev/null 2>&1 || true
    fi
    exec org "$@"
  ' org "${ARGS[@]}"
status=$?
set -e

# ---------- host-side patch review (unchanged) ----------
if [[ "$REVIEW_MODE" == "review" ]]; then
  PATCH_ROOT="$PWD/.org"
  PATCH_HOST_PATH="$(ls -t "$PATCH_ROOT"/runs/*/session.patch 2>/dev/null | head -n1 || true)"
  if [[ -n "$PATCH_HOST_PATH" && -f "$PATCH_HOST_PATH" ]]; then
    if [[ ! -s "$PATCH_HOST_PATH" ]]; then
      echo "[org] (host-review) patch is empty; skipping review."
    else
      "$REPO_DIR/scripts/host-patch-review.sh" \
        --patch   "$PATCH_HOST_PATH" \
        --project "$PWD" || true
    fi
  else
    echo "[org] (host-review) no patch found under $PATCH_ROOT"
  fi
fi

exit "$status"
